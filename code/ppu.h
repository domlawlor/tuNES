#pragma once 

const u16 ppuPixelWidth = 256;
const u16 ppuPixelHeight = 240;

const u16 pixelsPerTile = 8;

const u16 backgroundPaletteAddress = 0x3F00;
const u16 spritePaletteAddress = 0x3F10;

const u16 secondaryOamSpriteMax = 8;

const u16 oamSize = 0x100;
const u16 oamSpriteTotal = 64;

struct OamSprite
{
	u8 Y;
	u8 tile;
	u8 atrb;
	u8 X;
};

struct Sprite
{
	OamSprite oamData;

	bool priority;
	bool spriteZero;

	u8 paletteValue;
	u8 patternLow;
	u8 patternHigh;
};

enum class ScanlineType
{
	VISIBLE = 0,
	POST_RENDER,
	VBLANK,
	PRE_RENDER
};

//constexpr u64 PpuMemorySize = Kilobytes(64);
constexpr u64 PpuMemorySize = Kilobytes(16);
constexpr u64 NametableBankSize = Kilobytes(1);

class Ppu
{
public:
	void Init();
	void RunCatchup(u64 masterClock);

	Color *GetPixelBuffer() { return m_pixelBuffer; };

private:
	void RunCycle();

	void VisibleLine();
	void PostRenderLine() {}; // Does nothing
	void VblankLine();
	void PreRenderLine();

	void LoadFutureData();

	void ResetScrollHorz();
	void ResetScrollVert();
	void ScrollIncHorz();
	void ScrollIncVert();

	void EvaluateSecondaryOam();

	void DrawPixel(u16 x, u16 y, Color colour);

private:
	Color *m_pixelBuffer;
	u8 m_memory[PpuMemorySize];

	u8 m_nametableBankA[NametableBankSize];
	u8 m_nametableBankB[NametableBankSize];
	u8 m_nametableBankC[NametableBankSize];
	u8 m_nametableBankD[NametableBankSize];

	bool m_hitEndFrame;
//};
//
//struct Ppu
//{
	u64 clocksHit;

	bool renderingEnabled;

	bool oddFrame;

	u16 scanline;
	u16 scanlineCycle;

	ScanlineType scanlineType;

	// VRAM Address
	u16 vRamAdrs;
	u16 tempVRamAdrs;
	u8 latchWrite;
	u8 fineX;

	// 
	u16 lowPatternShiftReg;
	u16 highPatternShiftReg;
	u8 paletteLatchOld;
	u8 paletteLatchNew;

	u8 nextLowPattern;
	u8 nextHighPattern;
	u8 nextAtrbByte;
	u16 nextNametableAdrs;

	// Control Reg
	u8 nametableBase;
	u8 vRamIncrement;
	u16 sPRTPattenBase;
	u16 bGPatternBase;
	bool spriteSize8x16;
	bool ppuSlave;
	bool generateNMI;

	// Mask Reg
	bool greyScale;
	bool showBGLeft8Pixels;
	bool showSPRTLeft8Pixels;
	bool showBackground;
	bool showSprites;
	bool emphasizeRed;
	bool emphasizeGreen;
	bool emphasizeBlue;

	// Status Reg
	bool spriteOverflow;
	bool spriteZeroHit;
	bool verticalBlank;

	bool supressVbl;
	bool supressNmiSet;

	// Oam Address Reg
	u8 oamAddress;

	// VRam Data Read Buffering
	u8 vRamDataBuffer;

	//Sprites
	u8 *oamDma;
	u8 oam[oamSize];

	u8 secondarySpriteCount;
	Sprite secondaryOam[secondaryOamSpriteMax];

	u8 preparedSpriteCount;
	Sprite preparedSprites[secondaryOamSpriteMax];
};

constexpr u8 PaletteEntries = 64;
Color ColorPalette[PaletteEntries] =
{
	{0x75, 0x75, 0x75, 0xFF}, {0x27, 0x1B, 0x8F, 0xFF}, {0x00, 0x00, 0xAB, 0xFF}, {0x47, 0x00, 0x9F, 0xFF}, //0x00
	{0x8F, 0x00, 0x77, 0xFF}, {0xAB, 0x00, 0x13, 0xFF}, {0xA7, 0x00, 0x00, 0xFF}, {0x7F, 0x0B, 0x00, 0xFF}, //0x04
	{0x43, 0x2F, 0x00, 0xFF}, {0x00, 0x47, 0x00, 0xFF}, {0x00, 0x51, 0x00, 0xFF}, {0x00, 0x3F, 0x17, 0xFF}, //0x08
	{0x1B, 0x3F, 0x5F, 0xFF}, {0x00, 0x00, 0x00, 0xFF}, {0x00, 0x00, 0x00, 0xFF}, {0x00, 0x00, 0x00, 0xFF}, //0x0C
	{0xBC, 0xBC, 0xBC, 0xFF}, {0x00, 0x73, 0xEF, 0xFF}, {0x23, 0x3B, 0xEF, 0xFF}, {0x83, 0x00, 0xF3, 0xFF}, //0x10
	{0xBF, 0x00, 0xBF, 0xFF}, {0xE7, 0x00, 0x5B, 0xFF}, {0xDB, 0x2B, 0x00, 0xFF}, {0xCB, 0x4F, 0x0F, 0xFF}, //0x14
	{0x8B, 0x73, 0x00, 0xFF}, {0x00, 0x97, 0x00, 0xFF}, {0x00, 0xAB, 0x00, 0xFF}, {0x00, 0x93, 0x3B, 0xFF}, //0x18
	{0x00, 0x83, 0x8B, 0xFF}, {0x00, 0x00, 0x00, 0xFF}, {0x00, 0x00, 0x00, 0xFF}, {0x00, 0x00, 0x00, 0xFF}, //0x1C
	{0xFF, 0xFF, 0xFF, 0xFF}, {0x3F, 0xBF, 0xFF, 0xFF}, {0x5F, 0x97, 0xFF, 0xFF}, {0xA7, 0x8B, 0xFD, 0xFF}, //0x20
	{0xF7, 0x7B, 0xFF, 0xFF}, {0xFF, 0x77, 0xB7, 0xFF}, {0xFF, 0x77, 0x63, 0xFF}, {0xFF, 0x9B, 0x3B, 0xFF}, //0x24
	{0xF3, 0xBF, 0x3F, 0xFF}, {0x83, 0xD3, 0x13, 0xFF}, {0x4F, 0xDF, 0x4B, 0xFF}, {0x58, 0xF8, 0x98, 0xFF}, //0x28
	{0x00, 0xEB, 0xDB, 0xFF}, {0x00, 0x00, 0x00, 0xFF}, {0x00, 0x00, 0x00, 0xFF}, {0x00, 0x00, 0x00, 0xFF}, //0x2C
	{0xFF, 0xFF, 0xFF, 0xFF}, {0xAB, 0xE7, 0xFF, 0xFF}, {0xC7, 0xD7, 0xFF, 0xFF}, {0xD7, 0xCB, 0xFF, 0xFF}, //0x30
	{0xFF, 0xC7, 0xFF, 0xFF}, {0xFF, 0xC7, 0xDB, 0xFF}, {0xFF, 0xBF, 0xB3, 0xFF}, {0xFF, 0xDB, 0xAB, 0xFF}, //0x34
	{0xFF, 0xE7, 0xA3, 0xFF}, {0xE3, 0xFF, 0xA3, 0xFF}, {0xAB, 0xF3, 0xBF, 0xFF}, {0xB3, 0xFF, 0xCF, 0xFF}, //0x38
	{0x9F, 0xFF, 0xF3, 0xFF}, {0x00, 0x00, 0x00, 0xFF}, {0x00, 0x00, 0x00, 0xFF}, {0x00, 0x00, 0x00, 0xFF}  //0x3C
};
